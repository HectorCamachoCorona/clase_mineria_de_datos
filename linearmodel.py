# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1fCYZ67_8ABMFTDudJR9vdMMmjjT1bfBm

# New Section
"""

import pandas as pd
import matplotlib.pyplot as plt
import statsmodels.api as sm
import numbers
from tabulate import tabulate

def print_tabulate(df: pd.DataFrame):
    print(tabulate(df, headers=df.columns, tablefmt="orgtbl"))

def transform_variable(df: pd.DataFrame, x: str) -> pd.Series:
    if isinstance(df[x][0], numbers.Number):
        return df[x]  # Si ya es numérica, se retorna tal cual
    else:
        return pd.Series([i for i in range(0, len(df[x]))])


def linear_regression(df: pd.DataFrame, x: str, y: str) -> None:
    df_clean = df[[x, y]].dropna()
    df_clean = df_clean[~df_clean.isin([float('inf'), float('-inf')]).any(axis=1)]

    if df_clean.empty:
        print(f"No hay datos válidos para la regresión entre {x} y {y}.")
        return


    fixed_x = transform_variable(df_clean, x)
    model = sm.OLS(df_clean[y], sm.add_constant(fixed_x)).fit()
    print(model.summary())

    coef = pd.read_html(model.summary().tables[1].as_html(), header=0, index_col=0)[0]['coef']
    df_clean.plot(x=x, y=y, kind='scatter')
    plt.plot(fixed_x, [coef.values[1] * x + coef.values[0] for _, x in fixed_x.items()], color='red')
    plt.xticks(rotation=90)
    plt.savefig(f'img/lr_{y}_{x}.png')
    plt.close()

df = pd.read_csv("datos_limpios.csv")

df['owner'] = df['owner'].map({
    'First Owner': 1,
    'Second Owner': 2,
    'Third Owner': 3,
    'Fourth & Above Owner': 4
})

linear_regression(df, 'owner', 'selling_price')

import matplotlib.pyplot as plt
import statsmodels.api as sm
import numbers
import pandas as pd
from tabulate import tabulate


def print_tabulate(df: pd.DataFrame):
    print(tabulate(df, headers=df.columns, tablefmt="orgtbl"))

def transform_variable(df: pd.DataFrame, x: str) -> pd.Series:
    if isinstance(df[x].iloc[0], numbers.Number):
        return df[x]
    else:
        return pd.Series([i for i in range(len(df[x]))])

def linear_regression(df: pd.DataFrame, x: str, y: str) -> None:
    fixed_x = transform_variable(df, x)
    model = sm.OLS(df[y], sm.add_constant(fixed_x)).fit()
    print(model.summary())

    coef = pd.read_html(model.summary().tables[1].as_html(), header=0, index_col=0)[0]['coef']
    df.plot(x=x, y=y, kind='scatter')
    plt.plot(df[x], [coef.values[1] * x_val + coef.values[0] for x_val in fixed_x], color='red')
    plt.xticks(rotation=90)
    plt.xlabel(x)
    plt.ylabel(y)
    plt.title(f'Regresión Lineal: {y} vs {x}')
    plt.savefig(f'img/lr_{y}_{x}.png')
    plt.close()

df = pd.read_csv("datos_limpios.csv")

#Modelos mas populares
most_popular_models = df.groupby(['brand', 'model']).size().reset_index(name='count')
most_popular_models = most_popular_models.sort_values('count', ascending=False)
most_popular_per_brand = most_popular_models.groupby('brand').first().reset_index()

#autos mas populares de cada marca
mask = df.apply(lambda row: any((row['brand'] == b and row['model'] == m)
                                for b, m in zip(most_popular_per_brand['brand'], most_popular_per_brand['model'])),
                axis=1)
df_popular = df[mask]

#Agrupacion por marca-modelo y calcular precio y km promedio
df_grouped = df_popular.groupby(['brand', 'model'])[['selling_price', 'km_driven']].mean().reset_index()
df_grouped.columns = ['brand', 'model', 'avg_price', 'avg_km']

print_tabulate(df_grouped)

linear_regression(df_grouped, "avg_km", "avg_price")

import pandas as pd
import statsmodels.api as sm
import matplotlib.pyplot as plt
import seaborn as sns

df = pd.read_csv("datos_limpios.csv")

q1 = df['selling_price'].quantile(0.25)
q3 = df['selling_price'].quantile(0.75)
iqr = q3 - q1
lower_bound = q1 - 1.5 * iqr
upper_bound = q3 + 1.5 * iqr

df_filtered = df[(df['selling_price'] >= lower_bound) & (df['selling_price'] <= upper_bound)]

print(f"Datos filtrados sin outliers: {df_filtered.shape[0]} filas")

X = df_filtered['km_driven']
y = df_filtered['selling_price']

X = sm.add_constant(X)

model = sm.OLS(y, X).fit()

print(model.summary())


plt.figure(figsize=(10, 6))
plt.scatter(df_filtered['km_driven'], df_filtered['selling_price'], alpha=0.5)
plt.plot(df_filtered['km_driven'], model.predict(X), color='red', linewidth=2)
plt.title('Precio vs Kilometraje (sin outliers de precio)')
plt.xlabel('Kilometraje (km)')
plt.ylabel('Precio de Venta')
plt.tight_layout()
plt.show()